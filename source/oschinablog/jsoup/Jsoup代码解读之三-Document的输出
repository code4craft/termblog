<h2>Jsoup代码解读之三-Document的输出</h2><div class="BlogContent">
 <p>Jsoup官方说明里，一个重要的功能就是<strong><em>output tidy HTML</em></strong>。这里我们看看Jsoup是如何输出HTML的。</p> 
 <h2>HTML相关知识</h2> 
 <p>分析代码前，我们不妨先想想，“tidy HTML&quot;到底包括哪些东西：</p> 
 <ul> 
  <li>换行，块级标签习惯上都会独占一行</li> 
  <li>缩进，根据HTML标签嵌套层数，行首缩进会不同</li> 
  <li>严格的标签闭合，如果是可以自闭合的标签并且没有内容，则进行自闭合</li> 
  <li>HTML实体的转义</li> 
 </ul> 
 <p>这里要补充一下HTML标签的知识。HTML Tag可以分为block和inline两类。关于Tag的inline和block的定义可以参考<a href="http://www.w3schools.com/html/html_blocks.asp" rel="nofollow">http://www.w3schools.com/html/html_blocks.asp</a>，而Jsoup的<code>Tag</code>类则是对Java开发者非常好的学习资料。</p> 
 <pre class="brush: java; auto-links: false;">// internal static initialisers:
// prepped from http://www.w3.org/TR/REC-html40/sgml/dtd.html and other sources
//block tags，需要换行
private static final String[] blockTags = {
        &quot;html&quot;, &quot;head&quot;, &quot;body&quot;, &quot;frameset&quot;, &quot;script&quot;, &quot;noscript&quot;, &quot;style&quot;, &quot;meta&quot;, &quot;link&quot;, &quot;title&quot;, &quot;frame&quot;,
        &quot;noframes&quot;, &quot;section&quot;, &quot;nav&quot;, &quot;aside&quot;, &quot;hgroup&quot;, &quot;header&quot;, &quot;footer&quot;, &quot;p&quot;, &quot;h1&quot;, &quot;h2&quot;, &quot;h3&quot;, &quot;h4&quot;, &quot;h5&quot;, &quot;h6&quot;,
        &quot;ul&quot;, &quot;ol&quot;, &quot;pre&quot;, &quot;div&quot;, &quot;blockquote&quot;, &quot;hr&quot;, &quot;address&quot;, &quot;figure&quot;, &quot;figcaption&quot;, &quot;form&quot;, &quot;fieldset&quot;, &quot;ins&quot;,
        &quot;del&quot;, &quot;s&quot;, &quot;dl&quot;, &quot;dt&quot;, &quot;dd&quot;, &quot;li&quot;, &quot;table&quot;, &quot;caption&quot;, &quot;thead&quot;, &quot;tfoot&quot;, &quot;tbody&quot;, &quot;colgroup&quot;, &quot;col&quot;, &quot;tr&quot;, &quot;th&quot;,
        &quot;td&quot;, &quot;video&quot;, &quot;audio&quot;, &quot;canvas&quot;, &quot;details&quot;, &quot;menu&quot;, &quot;plaintext&quot;
};
//inline tags，无需换行
private static final String[] inlineTags = {
        &quot;object&quot;, &quot;base&quot;, &quot;font&quot;, &quot;tt&quot;, &quot;i&quot;, &quot;b&quot;, &quot;u&quot;, &quot;big&quot;, &quot;small&quot;, &quot;em&quot;, &quot;strong&quot;, &quot;dfn&quot;, &quot;code&quot;, &quot;samp&quot;, &quot;kbd&quot;,
        &quot;var&quot;, &quot;cite&quot;, &quot;abbr&quot;, &quot;time&quot;, &quot;acronym&quot;, &quot;mark&quot;, &quot;ruby&quot;, &quot;rt&quot;, &quot;rp&quot;, &quot;a&quot;, &quot;img&quot;, &quot;br&quot;, &quot;wbr&quot;, &quot;map&quot;, &quot;q&quot;,
        &quot;sub&quot;, &quot;sup&quot;, &quot;bdo&quot;, &quot;iframe&quot;, &quot;embed&quot;, &quot;span&quot;, &quot;input&quot;, &quot;select&quot;, &quot;textarea&quot;, &quot;label&quot;, &quot;button&quot;, &quot;optgroup&quot;,
        &quot;option&quot;, &quot;legend&quot;, &quot;datalist&quot;, &quot;keygen&quot;, &quot;output&quot;, &quot;progress&quot;, &quot;meter&quot;, &quot;area&quot;, &quot;param&quot;, &quot;source&quot;, &quot;track&quot;,
        &quot;summary&quot;, &quot;command&quot;, &quot;device&quot;
};
//emptyTags是不能有内容的标签，这类标签都是可以自闭合的
private static final String[] emptyTags = {
        &quot;meta&quot;, &quot;link&quot;, &quot;base&quot;, &quot;frame&quot;, &quot;img&quot;, &quot;br&quot;, &quot;wbr&quot;, &quot;embed&quot;, &quot;hr&quot;, &quot;input&quot;, &quot;keygen&quot;, &quot;col&quot;, &quot;command&quot;,
        &quot;device&quot;
};
private static final String[] formatAsInlineTags = {
        &quot;title&quot;, &quot;a&quot;, &quot;p&quot;, &quot;h1&quot;, &quot;h2&quot;, &quot;h3&quot;, &quot;h4&quot;, &quot;h5&quot;, &quot;h6&quot;, &quot;pre&quot;, &quot;address&quot;, &quot;li&quot;, &quot;th&quot;, &quot;td&quot;, &quot;script&quot;, &quot;style&quot;,
        &quot;ins&quot;, &quot;del&quot;, &quot;s&quot;
};
//在这些标签里，需要保留空格
private static final String[] preserveWhitespaceTags = {
        &quot;pre&quot;, &quot;plaintext&quot;, &quot;title&quot;, &quot;textarea&quot;
};</pre> 
 <p>另外，Jsoup的<code>Entities</code>类里包含了一些HTML实体转义的东西。这些转义的对应数据保存在<code>entities-full.properties</code>和<code>entities-base.properties</code>里。</p> 
 <h2>Jsoup的格式化实现</h2> 
 <p>在Jsoup里，直接调用<code>Document.toString()</code>(继承自Element)，即可对文档进行输出。另外<code>OutputSettings</code>可以控制输出格式，主要是<code>prettyPrint</code>(是否重新格式化)、<code>outline</code>(是否强制所有标签换行)、<code>indentAmount</code>(缩进长度)等。</p> 
 <p>里面的继承和互相调用关系略微复杂，大概是这样子：</p> 
 <p><code>Document.toString()</code>=&gt;<code>Document.outerHtml()</code>=&gt;<code>Element.html()</code>，最终<code>Element.html()</code>又会循环调用所有子元素的<code>outerHtml()</code>，拼接起来作为输出。</p> 
 <pre class="brush: java; auto-links: false;">private void html(StringBuilder accum) {
    for (Node node : childNodes)
        node.outerHtml(accum);
}</pre> 
 <p>而<code>outerHtml()</code>会使用一个<code>OuterHtmlVisitor</code>对所以子节点做遍历，并拼装起来作为结果。</p> 
 <pre class="brush: java; auto-links: false;">protected void outerHtml(StringBuilder accum) {
    new NodeTraversor(new OuterHtmlVisitor(accum, getOutputSettings())).traverse(this);
}</pre> 
 <p>OuterHtmlVisitor会对所有子节点做遍历，并调用<code>node.outerHtmlHead()</code>和<code>node.outerHtmlTail</code>两个方法。</p> 
 <pre class="brush: java; auto-links: false;">private static class OuterHtmlVisitor implements NodeVisitor {
    private StringBuilder accum;
    private Document.OutputSettings out;

    public void head(Node node, int depth) {
        node.outerHtmlHead(accum, depth, out);
    }

    public void tail(Node node, int depth) {
        if (!node.nodeName().equals(&quot;#text&quot;)) // saves a void hit.
            node.outerHtmlTail(accum, depth, out);
    }
}</pre> 
 <p>我们终于找到了真正工作的代码，<code>node.outerHtmlHead()</code>和<code>node.outerHtmlTail</code>。Jsoup里每种Node的输出方式都不太一样，这里只讲讲两种主要节点：<code>Element</code>和<code>TextNode</code>。<code>Element</code>是格式化的主要对象，它的两个方法代码如下：</p> 
 <pre class="brush: java; auto-links: false;">void outerHtmlHead(StringBuilder accum, int depth, Document.OutputSettings out) {
    if (accum.length() &gt; 0 &amp;&amp; out.prettyPrint()
            &amp;&amp; (tag.formatAsBlock() || (parent() != null &amp;&amp; parent().tag().formatAsBlock()) || out.outline()) )
        //换行并调整缩进
        indent(accum, depth, out);
    accum
            .append(&quot;&lt;&quot;)
            .append(tagName());
    attributes.html(accum, out);

    if (childNodes.isEmpty() &amp;&amp; tag.isSelfClosing())
        accum.append(&quot; /&gt;&quot;);
    else
        accum.append(&quot;&gt;&quot;);
}

void outerHtmlTail(StringBuilder accum, int depth, Document.OutputSettings out) {
    if (!(childNodes.isEmpty() &amp;&amp; tag.isSelfClosing())) {
        if (out.prettyPrint() &amp;&amp; (!childNodes.isEmpty() &amp;&amp; (
                tag.formatAsBlock() || (out.outline() &amp;&amp; (childNodes.size()&gt;1 || (childNodes.size()==1 &amp;&amp; !(childNodes.get(0) instanceof TextNode))))
        )))
            //换行并调整缩进
            indent(accum, depth, out);
        accum.append(&quot;&lt;/&quot;).append(tagName()).append(&quot;&gt;&quot;);
    }
}</pre> 
 <p>而ident方法的代码只有一行：</p> 
 <pre class="brush: java; auto-links: false;">protected void indent(Stri